{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","selectedUser","usersFromServer","filter","classNames","TodoList","todos","map","titleBlock","App","useState","titleElement","titleElementEdit","userElement","userElementEdit","isButtonClick","isButtonClickEdit","todosFromServer","visibleTodosFromServer","visibleTodosFromServerEdit","SelectUser","value","disabled","action","method","onSubmit","event","preventDefault","newTodoBlock","Math","max","prev","submitForm","type","placeholder","onChange","target","titleInput","required","userChoose","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.278c979b.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","type User = {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n};\n\nexport const UserInfo = ({ user }: { user: User }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport usersFromServer from '../../api/users';\n\ntype Todo = {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n};\n\nexport const TodoInfo = ({ todo }: { todo: Todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n  const selectedUser = usersFromServer.filter((user) => user.id === userId);\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      <UserInfo user={selectedUser[0]} />\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\n\ntype Todo = {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n};\n\nexport const TodoList = ({ todos }: { todos: Todo[] }) => {\n  return (\n    <>\n      {todos.map((titleBlock) => (\n        <TodoInfo todo={titleBlock} key={titleBlock.id} />\n      ))}\n    </>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\n\nexport const App = () => {\n  const [titleElement, titleElementEdit] = useState('');\n  const [userElement, userElementEdit] = useState('0');\n  const [isButtonClick, isButtonClickEdit] = useState(false);\n  const [visibleTodosFromServer, visibleTodosFromServerEdit] = useState([\n    ...todosFromServer,\n  ]);\n\n  function SelectUser() {\n    return (\n      <>\n        <option value=\"0\" disabled>\n          Choose a user\n        </option>\n        {usersFromServer.map((user) => {\n          const { id, name } = user;\n\n          return (\n            <option key={id} value={id}>\n              {name}\n            </option>\n          );\n        })}\n      </>\n    );\n  }\n\n  const titleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    titleElementEdit(value);\n  };\n\n  const userChoose = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    userElementEdit(value);\n  };\n\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const maxId = Math.max(...visibleTodosFromServer.map(todo => todo.id));\n    const newTodoBlock = {\n      id: maxId + 1,\n      title: titleElement,\n      completed: false,\n      userId: +userElement,\n    };\n\n    if (userElement === '0') {\n      return false;\n    }\n\n    titleElementEdit('');\n    userElementEdit('0');\n\n    return visibleTodosFromServerEdit((prev) => [...prev, newTodoBlock]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => submitForm(event)}\n      >\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            name=\"title\"\n            placeholder=\"Please enter a title\"\n            onChange={(event) => titleInput(event)}\n            value={titleElement}\n            required\n          />\n          {isButtonClick && titleElement === '' && (\n            <span className=\"error title-error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            name=\"user\"\n            onChange={(event) => userChoose(event)}\n            value={userElement}\n            required\n          >\n            <SelectUser />\n          </select>\n\n          {isButtonClick && userElement === '0' && (\n            <span className=\"error user-error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"buttonSubmit\"\n          onClick={() => isButtonClickEdit(true)}\n        >\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={visibleTodosFromServer} />\n      </section>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}